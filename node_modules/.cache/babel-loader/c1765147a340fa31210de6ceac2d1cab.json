{"ast":null,"code":"import _regeneratorRuntime from \"/Users/bjlu/projects/countdown/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/bjlu/projects/countdown/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _assertThisInitialized from \"/Users/bjlu/projects/countdown/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _classCallCheck from \"/Users/bjlu/projects/countdown/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/bjlu/projects/countdown/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/bjlu/projects/countdown/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/bjlu/projects/countdown/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/bjlu/projects/countdown/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/bjlu/projects/countdown/src/Weather.js\";\nimport React, { Component } from 'react';\nimport moment from 'moment';\n\nvar Weather =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Weather, _Component);\n\n  function Weather() {\n    var _this;\n\n    _classCallCheck(this, Weather);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Weather).call(this));\n    _this.state = {\n      currentTime: moment(),\n      cities: {\n        'San Mateo': {\n          weatherId: 5391959,\n          timeZone: 'America/Los_Angeles'\n        },\n        'Toronto': {\n          weatherId: 6167865,\n          timeZone: 'America/Toronto'\n        },\n        'Paris': {\n          weatherId: 2988507,\n          timeZone: 'Europe/Paris'\n        },\n        'Sydney': {\n          weatherId: 2147714,\n          timeZone: 'Australia/Sydney'\n        }\n      }\n    };\n    return _this;\n  }\n\n  _createClass(Weather, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      window.setInterval(function () {\n        return _this2.setState({\n          currentTime: moment()\n        });\n      }, 5000);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          cities = _this$state.cities,\n          currentTime = _this$state.currentTime;\n      return React.createElement(\"div\", {\n        className: \"panels\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, Object.keys(cities).map(function (cityName) {\n        return React.createElement(City, {\n          name: cityName,\n          weatherId: cities[cityName].weatherId,\n          timeZone: cities[cityName].timeZone,\n          bgImg: cities[cityName].bgImg,\n          currentTime: currentTime,\n          key: cityName,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 40\n          },\n          __self: this\n        });\n      }));\n    }\n  }]);\n\n  return Weather;\n}(Component);\n\nvar City =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(City, _React$Component);\n\n  function City(props) {\n    var _this3;\n\n    _classCallCheck(this, City);\n\n    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(City).call(this, props));\n    var _this3$props = _this3.props,\n        timeZone = _this3$props.timeZone,\n        currentTime = _this3$props.currentTime;\n    _this3.state = {\n      weatherData: {},\n      localTime: currentTime.tz(timeZone).format('HH:mm dddd'),\n      currentHour: currentTime.tz(timeZone).format('HH'),\n      open: false,\n      bgGradient: ''\n    };\n    _this3.getWeatherInfo = _this3.getWeatherInfo.bind(_assertThisInitialized(_assertThisInitialized(_this3)));\n    _this3.updateCurrentTime = _this3.updateCurrentTime.bind(_assertThisInitialized(_assertThisInitialized(_this3)));\n    _this3.toggleOpen = _this3.toggleOpen.bind(_assertThisInitialized(_assertThisInitialized(_this3)));\n    return _this3;\n  }\n\n  _createClass(City, [{\n    key: \"getWeatherInfo\",\n    value: function () {\n      var _getWeatherInfo = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(id) {\n        var res, weatherInfo;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return fetch(\"https://api.openweathermap.org/data/2.5/weather?id=\".concat(id, \"&units=metric&appid=c5baa00af2bfbc51b5a8bff68a069bb0\")).then(function (res) {\n                  return res.json();\n                });\n\n              case 2:\n                res = _context.sent;\n                weatherInfo = {\n                  temp: res.main.temp,\n                  desc: res.weather[0].main,\n                  icon: \"icon-\".concat(res.weather[0].icon)\n                };\n                this.setState({\n                  weatherData: weatherInfo\n                });\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function getWeatherInfo(_x) {\n        return _getWeatherInfo.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"setGradient\",\n    value: function setGradient(currentHour) {\n      if (currentHour < 3) {\n        this.setState({\n          bgGradient: 'night-2'\n        });\n      } else if (currentHour < 6) {\n        this.setState({\n          bgGradient: 'dawn'\n        });\n      } else if (currentHour < 9) {\n        this.setState({\n          bgGradient: 'morning'\n        });\n      } else if (currentHour < 12) {\n        this.setState({\n          bgGradient: 'afternoon-1'\n        });\n      } else if (currentHour < 15) {\n        this.setState({\n          bgGradient: 'afternoon-2'\n        });\n      } else if (currentHour < 18) {\n        this.setState({\n          bgGradient: 'evening-1'\n        });\n      } else if (currentHour < 21) {\n        this.setState({\n          bgGradient: 'evening-2'\n        });\n      } else if (currentHour < 24) {\n        this.setState({\n          bgGradient: 'night-1'\n        });\n      }\n    }\n  }, {\n    key: \"updateCurrentTime\",\n    value: function updateCurrentTime() {\n      var _this$props = this.props,\n          timeZone = _this$props.timeZone,\n          currentTime = _this$props.currentTime;\n      this.setState({\n        localTime: currentTime.tz(timeZone).format('dddd HH:mm')\n      });\n      this.setGradient(this.state.currentHour);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this4 = this;\n\n      var weatherId = this.props.weatherId;\n      this.getWeatherInfo(weatherId);\n      window.setInterval(function () {\n        return _this4.updateCurrentTime();\n      }, 5000);\n      this.setGradient(this.state.currentHour);\n    }\n  }, {\n    key: \"toggleOpen\",\n    value: function toggleOpen() {\n      var currentState = this.state.open;\n      this.setState({\n        open: !currentState\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          name = _this$props2.name,\n          bgImg = _this$props2.bgImg;\n      var localTime = this.state.localTime;\n      var _this$state$weatherDa = this.state.weatherData,\n          desc = _this$state$weatherDa.desc,\n          temp = _this$state$weatherDa.temp,\n          icon = _this$state$weatherDa.icon;\n      var activeClass = this.state.open ? 'open' : '';\n      var gradientClass = this.state.bgGradient;\n      return React.createElement(\"div\", {\n        className: \"panel \".concat(activeClass, \" \").concat(gradientClass),\n        onClick: this.toggleOpen,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, name), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, localTime)), React.createElement(\"div\", {\n        className: \"weather-icon\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: icon,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }), temp ? React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, \" \", desc, \" \", temp, \"\\xB0C \") : ''));\n    }\n  }]);\n\n  return City;\n}(React.Component);\n\nexport default Weather;","map":{"version":3,"sources":["/Users/bjlu/projects/countdown/src/Weather.js"],"names":["React","Component","moment","Weather","state","currentTime","cities","weatherId","timeZone","window","setInterval","setState","Object","keys","map","cityName","bgImg","City","props","weatherData","localTime","tz","format","currentHour","open","bgGradient","getWeatherInfo","bind","updateCurrentTime","toggleOpen","id","fetch","then","res","json","weatherInfo","temp","main","desc","weather","icon","setGradient","currentState","name","activeClass","gradientClass"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport moment from 'moment';\n\nclass Weather extends Component {\n    constructor() {\n        super();\n        this.state = {\n            currentTime: moment(),\n            cities: {\n                'San Mateo': {\n                    weatherId: 5391959,\n                    timeZone: 'America/Los_Angeles'\n                },\n                'Toronto': {\n                    weatherId: 6167865,\n                    timeZone: 'America/Toronto'\n                },\n                'Paris': {\n                    weatherId: 2988507,\n                    timeZone: 'Europe/Paris'\n                },\n                'Sydney': {\n                    weatherId: 2147714,\n                    timeZone: 'Australia/Sydney'\n                }\n            }\n        }\n    }\n    componentDidMount() {\n        window.setInterval(() => this.setState({ currentTime: moment() }), 5000)\n    }\n    render() {\n        const { cities, currentTime } = this.state;\n        return (\n            <div className=\"panels\">\n                {\n                    Object\n                        .keys(cities)\n                        .map(cityName =>\n                            <City name={cityName}\n                                weatherId={cities[cityName].weatherId}\n                                timeZone={cities[cityName].timeZone}\n                                bgImg={cities[cityName].bgImg}\n                                currentTime={currentTime}\n                                key={cityName}\n                            />)\n                }\n            </div>\n        )\n    }\n}\n\nclass City extends React.Component {\n    constructor(props) {\n        super(props);\n        const { timeZone, currentTime } = this.props;\n        this.state = {\n            weatherData: {},\n            localTime: currentTime.tz(timeZone).format('HH:mm dddd'),\n            currentHour: currentTime.tz(timeZone).format('HH'),\n            open: false,\n            bgGradient: ''\n        }\n        this.getWeatherInfo = this.getWeatherInfo.bind(this);\n        this.updateCurrentTime = this.updateCurrentTime.bind(this);\n        this.toggleOpen = this.toggleOpen.bind(this);\n    };\n    async getWeatherInfo(id) {\n        const res = await fetch(`https://api.openweathermap.org/data/2.5/weather?id=${id}&units=metric&appid=c5baa00af2bfbc51b5a8bff68a069bb0`).then(res => res.json());\n        const weatherInfo = {\n            temp: res.main.temp,\n            desc: res.weather[0].main,\n            icon: `icon-${res.weather[0].icon}`\n        };\n        this.setState({\n            weatherData: weatherInfo\n        })\n    }\n    setGradient(currentHour) {\n        if (currentHour < 3) {\n            this.setState({ bgGradient: 'night-2' });\n        } else if (currentHour < 6) {\n            this.setState({ bgGradient: 'dawn' });\n        } else if (currentHour < 9) {\n            this.setState({ bgGradient: 'morning' });\n        } else if (currentHour < 12) {\n            this.setState({ bgGradient: 'afternoon-1' });\n        } else if (currentHour < 15) {\n            this.setState({ bgGradient: 'afternoon-2' });\n        } else if (currentHour < 18) {\n            this.setState({ bgGradient: 'evening-1' });\n        } else if (currentHour < 21) {\n            this.setState({ bgGradient: 'evening-2' });\n        } else if (currentHour < 24) {\n            this.setState({ bgGradient: 'night-1' });\n        }\n    }\n    updateCurrentTime() {\n        const { timeZone, currentTime } = this.props;\n        this.setState({ localTime: currentTime.tz(timeZone).format('dddd HH:mm') });\n        this.setGradient(this.state.currentHour);\n    }\n    componentDidMount() {\n        const { weatherId } = this.props;\n        this.getWeatherInfo(weatherId);\n        window.setInterval(() => this.updateCurrentTime(), 5000);\n        this.setGradient(this.state.currentHour);\n    }\n    toggleOpen() {\n        const currentState = this.state.open;\n        this.setState({ open: !currentState });\n    }\n    render() {\n        const { name, bgImg } = this.props;\n        const { localTime } = this.state;\n        const { desc, temp, icon } = this.state.weatherData;\n        const activeClass = this.state.open ? 'open' : '';\n        const gradientClass = this.state.bgGradient;\n        return (\n            <div className={`panel ${activeClass} ${gradientClass}`}\n                onClick={this.toggleOpen}\n            >\n                <div>\n                    <h2>{name}</h2>\n                    <p>{localTime}</p>\n                </div>\n                <div className=\"weather-icon\">\n                    <i className={icon}></i>\n                    {temp ?\n                        <span> {desc} {temp}°C </span>\n                        : ''\n                    }\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Weather;\n"]},"metadata":{},"sourceType":"module"}