{"version":3,"sources":["assets/india.png","assets/shantaram.jpg","ProgressBar.js","Weather.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","ProgressBarExample","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","percentage","end","moment","start","timeBetweenStartAndEnd","timeBetweenStartAndToday","Math","round","setState","objectSpread","react_default","a","createElement","ProgressBar_ProgressBar","Component","ProgressBar","className","ProgressBar_Filler","role","aria-label","Filler","style","width","concat","Weather","getMumbaiWeather","axios","get","then","response","mumbai","data","main","temp","catch","error","console","log","getStockholmWeather","stockholm","App","date","Date","getToDate","subtract","_this2","setInterval","src","India","alt","Countdown_default","renderer","src_ProgressBar","backgroundColor","SpotifyPlayer_default","uri","size","height","view","theme","src_Weather","Shantaram","_ref","days","hours","minutes","seconds","completed","App_Completionist","Completionist","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.61f6638f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/india.a134cb34.png\";","module.exports = __webpack_public_path__ + \"static/media/shantaram.6877d92f.jpg\";","import React, { Component } from 'react';\nimport moment from 'moment';\n\nclass ProgressBarExample extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            percentage: 0\n        }\n    }\n\n    componentDidMount() {\n\n        const end = moment(\"2018-12-22\");\n        const start = moment(\"2018-10-19\");\n        const today = moment();\n\n        const timeBetweenStartAndEnd = (end - start);\n        const timeBetweenStartAndToday = (today - start);\n        const p = Math.round(timeBetweenStartAndToday / timeBetweenStartAndEnd * 100);\n\n        this.setState({\n            ...this.state, percentage: p\n        })\n    }\n\n    render() {\n        return (\n            <ProgressBar percentage={this.state.percentage} />\n        )\n    }\n}\n\nconst ProgressBar = (props) => {\n    return (\n        <div className=\"progress-bar\">\n            <Filler percentage={props.percentage} />\n            <div className=\"bear\"><span role=\"img\" aria-label=\"bear\">üêª</span></div>\n        </div>\n    )\n}\n\nconst Filler = (props) => {\n    return <div className=\"filler\" style={{ width: `${props.percentage}%` }} />\n}\n\nexport default ProgressBarExample;","import React, { Component } from 'react';\nimport axios from 'axios';\n\nclass Weather extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            mumbai: 0,\n            stockholm: 0\n        }\n    }\n\n    componentDidMount() {\n        this.getMumbaiWeather();\n        this.getStockholmWeather();\n    }\n\n    getMumbaiWeather = () => {\n        axios.get('https://api.openweathermap.org/data/2.5/weather?q=Mumbai&units=metric&appid=1ebf0b62e0e74a698ca5939c772a568e')\n            .then((response) => {\n                this.setState({ ...this.state, mumbai: response.data.main.temp })\n            })\n            .catch((error) => {\n                console.log(error);\n            });\n    }\n\n    getStockholmWeather = () => {\n        axios.get('https://api.openweathermap.org/data/2.5/weather?q=Stockholm&units=metric&appid=1ebf0b62e0e74a698ca5939c772a568e')\n            .then((response) => {\n                this.setState({ ...this.state, stockholm: response.data.main.temp })\n            })\n            .catch((error) => {\n                console.log(error);\n            });\n    }\n\n    render() {\n\n        return (\n            <div className=\"weather-div\">\n                <div className=\"city\">\n                    <div className=\"city-title\">\n                        Mumbai\n                    </div>\n                    <div className=\"temp\">\n                        {Math.round(this.state.mumbai)}¬∞C\n                    </div>\n                    <p className=\"weather-desc\">Sjukt varmt!</p>\n                </div>\n                <div className=\"city\">\n                    <div className=\"city-title\">\n                        Sthlm\n                    </div>\n                    <div className=\"temp\">\n                        {Math.round(this.state.stockholm)}¬∞C\n                    </div>\n                    <p className=\"weather-desc\">Sjukt kallt!</p>\n                </div>\n            </div >\n        )\n    }\n}\n\nexport default Weather;","import React, { Component } from 'react';\nimport Countdown from 'react-countdown-now';\nimport moment from 'moment';\nimport './App.css';\nimport ProgressBar from './ProgressBar';\nimport SpotifyPlayer from 'react-spotify-player';\nimport Shantaram from './assets/shantaram.jpg';\nimport Weather from './Weather';\nimport India from './assets/india.png';\n\nclass App extends Component {\n\n  state = {\n    date: new Date(),\n  }\n\n  componentDidMount() {\n    setInterval(\n      () => this.setState({ date: new Date() }),\n      1000\n    );\n  }\n\n  getToDate = () => {\n    const toDate = moment(\"2018-12-22T00:35\").subtract(4, \"hours\").subtract(30, \"minutes\") - moment();\n    return toDate;\n  }\n\n  render() {\n    const size = {\n      width: '100%',\n      height: 80,\n    };\n\n    return (\n      <div className=\"App\">\n        <div className=\"Title\">Isabell + Bj√∂rn = ‚ù§</div>\n        <img className=\"india1\" src={India} alt=\"\" />\n        <img className=\"india2\" src={India} alt=\"\" />\n        <div className=\"time\"></div>\n        <Countdown\n          date={moment() + this.getToDate()}\n          renderer={renderer}\n        />\n        <div className=\"progress-card\">\n          <div className=\"progress\">\n            <ProgressBar />\n            <div className=\"princess\"><span role=\"img\" aria-label=\"princess\">üë∏üèº</span></div>\n          </div>\n        </div>\n        <div className=\"weekly\">\n          <div className=\"spotify\" style={{ \"backgroundColor\": \"#449B9D\" }}>\n            <div className=\"spotify-label\">Veckans l√•t</div>\n            <SpotifyPlayer\n              uri=\"spotify:user:laundry_service:playlist:5GxRQ54dGmqzzMgO1eFzZd\"\n              size={size}\n              view={'list'}\n              theme={'black'}\n            />\n          </div>\n          <div className=\"weather\" style={{ \"backgroundColor\": \"#BB8F9D\" }}>\n            <Weather />\n          </div>\n          <div className=\"spotify\" style={{ \"backgroundColor\": \"#95CBC9\" }}>\n            <div className=\"spotify-label\">Aktuell bok</div>\n            <div className=\"book\">\n              <img className=\"book-image\" src={Shantaram} alt=\"\" /><div className=\"book-author\"> Gregory David Roberts</div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\nconst renderer = ({ days, hours, minutes, seconds, completed }) => {\n  if (completed) {\n    return <Completionist />;\n  } else {\n    return <div className=\"counter\">\n      <div className=\"counterItem\">\n        <div className=\"counterItemNumber\" style={{ \"backgroundColor\": \"#61B1A2\" }}>{days}</div>\n        <div className=\"counterItemLabel\">Dagar</div>\n      </div>\n      <div className=\"counterItem\">\n        <div className=\"counterItemNumber\" style={{ \"backgroundColor\": \"#95CBC9\" }}>{hours}</div>\n        <div className=\"counterItemLabel\">Timmar</div>\n      </div>\n      <div className=\"counterItem\">\n        <div className=\"counterItemNumber\" style={{ \"backgroundColor\": \"#DFAA83\" }}>{minutes}</div>\n        <div className=\"counterItemLabel\">Minuter</div>\n      </div>\n      <div className=\"counterItem\">\n        <div className=\"counterItemNumber\" style={{ \"backgroundColor\": \"#BB8F9D\" }}>{seconds}</div>\n        <div className=\"counterItemLabel\">Sekunder</div>\n      </div>\n    </div>\n  }\n}\n\nconst Completionist = () => <span>Nu h√§nder det!</span>","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}